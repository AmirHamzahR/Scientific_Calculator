
#include "calculations.h"
#include "xgpio.h"
#include "gpio_init.h"
#include <math.h>
#include <complex.h>
/*------------------------------------------------------------------------------*/


// operation function using switch case
void calculation(u16 function, double *ans, double complex *z,  s32 num1, s32 num2, u16 *deci, u16 *deci_I, u16 *deci_R)
{


	switch (function) {
	case 0:
		adder(ans, z, num2, num1, deci, deci_I, deci_R);
		break;
	case 1:
		subtractor(ans, z, num2, num1, deci, deci_I, deci_R);
		break;
	case 2:
		multiplicator(ans, z, num2, num1);
		break;
	case 3:
		divider(ans, z, num2, num1, deci, deci_I, deci_R);
		break;
	case 4:
		inv_subtractor(ans, z, num2, num1, deci_I, deci_R);
		break;
	case 5:
		inv_divider(ans, z, num2, num1, deci, deci_I, deci_R);
		break;

	default:
		displayNumber(0, 2);
		break;
	}
}



void adder(double *ans, double complex *z, s32 num2, s32 num1, u16 *deci, u16 *deci_I, u16 *deci_R)
		{
		double complex add = num2 + num1 * I; 		// Detects if complex number is present and calculates it
				*z = *z + (add);
			 	double complex result;
		 	  	s16 dec_I1, dec_R1;		// Detects if complex number is present and calculates it
	    		result = *z * 10;
	    		dec_I1= cimag(result);
	    		dec_R1 = creal (result);
	    		if (dec_I1 % 10 != 0){	// Detects decimal numbers
	    			if(dec_I1 > 0){
	    				*deci_I = 1;
	    			}
	    			else if(dec_I1 < 0){
	    				*deci_I = 4;
	    			}
	    		}
	    		if (dec_R1 % 10 != 0){
	    			if(dec_R1 > 0){
	    				*deci_R = 1;
	    			}
	    			else if(dec_R1 < 0){
	    				*deci_R = 4;
	    			}
	    		}
		}

void subtractor(double *ans, double complex *z, s32 num2, s32 num1, u16 *deci, u16 *deci_I, u16 *deci_R)	// The code for subtraction operation
        {
		double complex sub = num2 + num1 * I;	/// Detects if complex number is present and calculates it
				*z = *z - sub;
			 	double complex result;
		 	  	s16 dec_I1, dec_R1;		// Detects if complex number is present and calculates it
	    		result = *z * 10;
	    		dec_I1= cimag(result);
	    		dec_R1 = creal (result);
	    		if (dec_I1 % 10 != 0){	// Detects decimal numbers
	    			if(dec_I1 > 0){
	    				*deci_I = 1;
	    			}
	    			else if(dec_I1 < 0){
	    				*deci_I = 4;
	    			}
	    		}
	    		if (dec_R1 % 10 != 0){
	    			if(dec_R1 > 0){
	    				*deci_R = 1;
	    			}
	    			else if(dec_R1 < 0){
	    				*deci_R = 4;
	    			}
	    		}
        }

void multiplicator(double *ans, double complex *z, s32 num2, s32 num1)	// The code for multiplication operation
        {
		double complex mult = num2 + num1 * I;			// Detects if complex number is present and calculates it
        		*z = *z * mult;
        }

 void divider(double *ans, double complex *z, s32 num2, s32 num1, u16 *deci, u16 *deci_I, u16 *deci_R)
        {
	 	double complex div = num2 + num1 * I;
	 	double complex result;
 	  	s16 dec_I1, dec_R1;		// Detects if complex number is present and calculates it
    		*z = *z / div;
    		result = *z * 10;
    		dec_I1= cimag(result);
    		dec_R1 = creal (result);
    		if (dec_I1 % 10 != 0){	// Detects decimal numbers
    			if(dec_I1 > 0){
    				*deci_I = 1;
    			}
    			else if(dec_I1 < 0){
    				*deci_I = 4;
    			}
    		}
    		if (dec_R1 % 10 != 0){
    			if(dec_R1 > 0){
    				*deci_R = 1;
    			}
    			else if(dec_R1 < 0){
    				*deci_R = 4;
    			}
    		}

        }


void inv_subtractor(double *ans, double complex *z, s32 num2, s32 num1, u16 *deci_I, u16 *deci_R) // The code for subtraction operation
        {
		double complex sub = num2 + num1 * I;	/// Detects if complex number is present and calculates it
				*z = *z - sub;
			 	double complex result;
		 	  	s16 dec_I1, dec_R1;		// Detects if complex number is present and calculates it
	    		result = *z * 10;
	    		dec_I1= cimag(result);
	    		dec_R1 = creal (result);
	    		if (dec_I1 % 10 != 0){	// Detects decimal numbers
	    			if(dec_I1 > 0){
	    				*deci_I = 1;
	    			}
	    			else if(dec_I1 < 0){
	    				*deci_I = 4;
	    			}
	    		}
	    		if (dec_R1 % 10 != 0){
	    			if(dec_R1 > 0){
	    				*deci_R = 1;
	    			}
	    			else if(dec_R1 < 0){
	    				*deci_R = 4;
	    			}
	    		}
        }

void inv_divider(double *ans, double complex *z, s32 num2, s32 num1, u16 *deci, u16 *deci_I, u16 *deci_R)  // The code for division operation-
        {
 		double complex div = num2 + num1 * I;
		double complex result;
	 	  	s16 dec_I1, dec_R1;		// Detects if complex number is present and calculates it
	    		*z = *z / div;
	    		result = *z * 10;
	    		dec_I1= cimag(result);
	    		dec_R1 = creal (result);
	    		if (dec_I1 % 10 != 0){	// Detects decimal numbers
	    			if(dec_I1 > 0){
	    				*deci_I = 1;
	    			}
	    			else if(dec_I1 < 0){
	    				*deci_I = 4;
	    			}
	    		}
	    		if (dec_R1 % 10 != 0){
	    			if(dec_R1 > 0){
	    				*deci_R = 1;
	    			}
	    			else if(dec_R1 < 0){
	    				*deci_R = 4;
	    			}
	    		}

        }





/*	The functions for the arithmetic calculations are defined here so that it will be transferred to the
	main function.
*/
