
#include "calculations.h"
#include "xgpio.h"
#include "gpio_init.h"
#include <math.h>
#include <complex.h>
/*------------------------------------------------------------------------------*/


// operation function using switch case
void calculation(u16 function, double complex *z,  s32 num1, s32 num2, u16 *deci_I, u16 *deci_R)
{
	switch (function) {
	case 0:
		adder(z, num2, num1, deci_I, deci_R);
		break;
	case 1:
		subtractor(z, num2, num1, deci_I, deci_R);
		break;
	case 2:
		multiplicator(z, num2, num1, deci_I, deci_R);
		break;
	case 3:
		divider(z, num2, num1, deci_I, deci_R);
		break;
	case 4:
		inv_subtractor(z, num2, num1, deci_I, deci_R);
		break;
	case 5:
		inv_divider(z, num2, num1, deci_I, deci_R);
		break;
	case 6:
		power(z, num2, num1, deci_I, deci_R);
		break;
	case 7:
		sq_root(z, num2, num1, deci_I, deci_R);
		break;
	case 8:
		sine(z, num2, num1, deci_I, deci_R);
		break;
	case 9:
		cosine(z, num2, num1, deci_I, deci_R);
		break;
	case 10:
		tangent(z, num2, num1, deci_I, deci_R);
		break;
	case 11:
		exponential(z, num2, num1, deci_I, deci_R);
		break;
	case 12:
		nat_log(z, num2, num1, deci_I, deci_R);
		break;
	case 13:
		logarithm(z, num2, num1, deci_I, deci_R);
		break;
	}
}


// Code calculation for addition
void adder(double complex *z, s32 num2, s32 num1, u16 *deci_I, u16 *deci_R)
		{
		double complex add = num2 + num1 * I; 		// Detects if complex number is present and calculates it
				*z = *z + (add);
			 	double complex result;
		 	  	s16 dec_I1, dec_R1;		// Detects if complex number is present and calculates it
	    		result = *z * 10;		// This method is used since it double cannot use '%' to check remainders.
	    		dec_I1= cimag(result);
	    		dec_R1 = creal (result);
	    		if (dec_I1 % 10 != 0){	// Detects decimal numbers for imaginary numbers
	    			if(dec_I1 > 0){
	    				*deci_I = 1;
	    			}
	    			else if(dec_I1 < 0){
	    				*deci_I = 4;
	    			}
	    		}
	    		if (dec_R1 % 10 != 0){	// Detects decimal numbers for real numbers
	    			if(dec_R1 > 0){
	    				*deci_R = 1;
	    			}
	    			else if(dec_R1 < 0){
	    				*deci_R = 4;
	    			}
	    		}
		}
// Calculation for subtraction (ans - input)
void subtractor(double complex *z, s32 num2, s32 num1, u16 *deci_I, u16 *deci_R)	// The code for subtraction operation
        {
		double complex sub = num2 + num1 * I;	/// Detects if complex number is present and calculates it
				*z = *z - sub;
			 	double complex result;	// Used to detect the decimal number
		 	  	s16 dec_I1, dec_R1;		// Detects if complex number is present and calculates it
	    		result = *z * 10;		// This method is used since it double cannot use '%' to check remainders.
	    		dec_I1= cimag(result);
	    		dec_R1 = creal (result);
	    		if (dec_I1 % 10 != 0){	// Detects decimal numbers for imaginary numbers
	    			if(dec_I1 > 0){
	    				*deci_I = 1;
	    			}
	    			else if(dec_I1 < 0){
	    				*deci_I = 4;
	    			}
	    		}
	    		if (dec_R1 % 10 != 0){	// Detects decimal numbers for imaginary numbers
	    			if(dec_R1 > 0){
	    				*deci_R = 1;
	    			}
	    			else if(dec_R1 < 0){
	    				*deci_R = 4;
	    			}
	    		}
        }
// Code calculation for multiplication
void multiplicator(double complex *z, s32 num2, s32 num1, u16 *deci_I, u16 *deci_R)	// The code for multiplication operation
        {
		double complex mult = num2 + num1 * I;			// Detects if complex number is present and calculates it
        		double complex result;
        		*z = *z * mult;
         	  	s16 dec_I1, dec_R1;
            	result = *z * 10;		/*			Same section for decimal detection as before 			*/
            	dec_I1= cimag(result);
            	dec_R1 = creal (result);
            	if (dec_I1 % 10 != 0){
            		if(dec_I1 > 0){
            			*deci_I = 1;
            		}
            		else if(dec_I1 < 0){
            			*deci_I = 4;
            		}
            	}
            	if (dec_R1 % 10 != 0){
            		if(dec_R1 > 0){
            			*deci_R = 1;
            		}
            		else if(dec_R1 < 0){
            			*deci_R = 4;
            		}
            	}
        }
// Code calculation for division (answer/input)
 void divider(double complex *z, s32 num2, s32 num1, u16 *deci_I, u16 *deci_R)
        {
	 	double complex div = num2 + num1 * I;
	 	double complex result;
 	  	s16 dec_I1, dec_R1;		/*			Same section for decimal detection as before 			*/
    		*z = *z / div;
    		result = *z * 10;
    		dec_I1= cimag(result);
    		dec_R1 = creal (result);
    		if (dec_I1 % 10 != 0){
    			if(dec_I1 > 0){
    				*deci_I = 1;
    			}
    			else if(dec_I1 < 0){
    				*deci_I = 4;
    			}
    		}
    		if (dec_R1 % 10 != 0){
    			if(dec_R1 > 0){
    				*deci_R = 1;
    			}
    			else if(dec_R1 < 0){
    				*deci_R = 4;
    			}
    		}
        }

 // Code calculation for inverse subtraction (input - answer)
void inv_subtractor(double complex *z, s32 num2, s32 num1, u16 *deci_I, u16 *deci_R) // The code for subtraction operation
        {
		double complex sub = num2 + num1 * I;	/// Detects if complex number is present and calculates it
				*z = *z - sub;
			 	double complex result;	/*			Same section for decimal detection as before 			*/
		 	  	s16 dec_I1, dec_R1;		// Detects if complex number is present and calculates it
	    		result = *z * 10;
	    		dec_I1= cimag(result);
	    		dec_R1 = creal (result);
	    		if (dec_I1 % 10 != 0){	// Detects decimal numbers for imaginary numbers
	    			if(dec_I1 > 0){
	    				*deci_I = 1;
	    			}
	    			else if(dec_I1 < 0){
	    				*deci_I = 4;
	    			}
	    		}
	    		if (dec_R1 % 10 != 0){
	    			if(dec_R1 > 0){
	    				*deci_R = 1;
	    			}
	    			else if(dec_R1 < 0){
	    				*deci_R = 4;
	    			}
	    		}
        }
// Code calculation for inverse divide (input/ answer)
void inv_divider(double complex *z, s32 num2, s32 num1, u16 *deci_I, u16 *deci_R)  // The code for division operation-
        {
 		double complex div = num2 + num1 * I;
		double complex result;		/*			Same section for decimal detection as before 			*/
	 	  	s16 dec_I1, dec_R1;		// Detects if complex number is present and calculates it
	    		*z = div / *z;
	    		result = *z * 10;
	    		dec_I1= cimag(result);
	    		dec_R1 = creal (result);
	    		if (dec_I1 % 10 != 0){	// Detects decimal numbers for imaginary numbers
	    			if(dec_I1 > 0){
	    				*deci_I = 1;
	    			}
	    			else if(dec_I1 < 0){
	    				*deci_I = 4;
	    			}
	    		}
	    		if (dec_R1 % 10 != 0){
	    			if(dec_R1 > 0){
	    				*deci_R = 1;
	    			}
	    			else if(dec_R1 < 0){
	    				*deci_R = 4;
	    			}
	    		}
        }
// Code calculation for power
void power(double complex *z, s32 num2, s32 num1, u16 *deci_I, u16 *deci_R)
       {
	 	double complex tothepower = num2 + num1 * I;
	 	double complex result;	/*			Same section for decimal detection as before 			*/
	  	s16 dec_I1, dec_R1;		// Detects if complex number is present and calculates it
	  	*z = cpow(*z, tothepower);
   		result = *z * 10;
   		dec_I1= cimag(result);
   		dec_R1 = creal (result);
   		if (dec_I1 % 10 != 0){	// Detects decimal numbers
   			if(dec_I1 > 0){
   				*deci_I = 1;
   			}
   			else if(dec_I1 < 0){
   				*deci_I = 4;
   			}
   		}
   		if (dec_R1 % 10 != 0){
   			if(dec_R1 > 0){
   				*deci_R = 1;
   			}
   			else if(dec_R1 < 0){
   				*deci_R = 4;
   			}
   		}

       }
// Code calculation for square root
void sq_root(double complex *z, s32 num2, s32 num1, u16 *deci_I, u16 *deci_R)
       {
 	double complex result;
  	s16 dec_I1, dec_R1;		// Detects if complex number is present and calculates it
  		*z = csqrt(*z); // Calculates the sqrt of *z

		result = *z * 10;	/*			Same section for decimal detection as before 			*/
		dec_I1= cimag(result);
		dec_R1 = creal (result);
		if (dec_I1 % 10 != 0){	// Detects decimal numbers
			if(dec_I1 > 0){
				*deci_I = 1;
			}
			else if(dec_I1 < 0){
				*deci_I = 4;
			}
		}
		if (dec_R1 % 10 != 0){
			if(dec_R1 > 0){
				*deci_R = 1;
			}
			else if(dec_R1 < 0){
				*deci_R = 4;
			}
		}

       }
// Code calculation for sine
void sine(double complex *z, s32 num2, s32 num1, u16 *deci_I, u16 *deci_R)
       {
 	double complex result;
 	double complex a;
    double complex val = PI / 180;
  	s16 dec_I1, dec_R1;		// Detects if complex number is present and calculates it
		a = *z * val;
		*z = csin(a);
		result = *z * 10;		/*			Same section for decimal detection as before 			*/
		dec_I1= cimag(result);
		dec_R1 = creal (result);
		if (dec_I1 % 10 != 0){	// Detects decimal numbers
			if(dec_I1 > 0){
				*deci_I = 1;
			}
			else if(dec_I1 < 0){
				*deci_I = 4;
			}
		}
		if (dec_R1 % 10 != 0){
			if(dec_R1 > 0){
				*deci_R = 1;
			}
			else if(dec_R1 < 0){
				*deci_R = 4;
			}
		}

       }
// Code calculation for cosine
void cosine(double complex *z, s32 num2, s32 num1, u16 *deci_I, u16 *deci_R)
       {
 	double complex result;
 	double complex a;
    double val = PI / 180;
  	s16 dec_I1, dec_R1;		// Detects if complex number is present and calculates it
		a = *z * val;
		*z = ccos(a);// Calculates the cosine of *z
		result = *z * 10;		/*			Same section for decimal detection as before 			*/
		dec_I1= cimag(result);
		dec_R1 = creal (result);
		if (dec_I1 % 10 != 0){	// Detects decimal numbers
			if(dec_I1 > 0){
				*deci_I = 1;
			}
			else if(dec_I1 < 0){
				*deci_I = 4;
			}
		}
		if (dec_R1 % 10 != 0){
			if(dec_R1 > 0){
				*deci_R = 1;
			}
			else if(dec_R1 < 0){
				*deci_R = 4;
			}
		}

       }
// Code calculation for tangent
void tangent(double complex *z, s32 num2, s32 num1, u16 *deci_I, u16 *deci_R)
       {
 	double complex result;
 	double complex a;
    double val = PI / 180;
  	s16 dec_I1, dec_R1;		// Detects if complex number is present and calculates it
		a = *z * val;
		*z = ctan(a); 		// Calculates the tangent of *z
		result = *z * 10;		/*			Same section for decimal detection as before 			*/
		dec_I1= cimag(result);
		dec_R1 = creal (result);
		if (dec_I1 % 10 != 0){	// Detects decimal numbers
			if(dec_I1 > 0){
				*deci_I = 1;
			}
			else if(dec_I1 < 0){
				*deci_I = 4;
			}
		}
		if (dec_R1 % 10 != 0){
			if(dec_R1 > 0){
				*deci_R = 1;
			}
			else if(dec_R1 < 0){
				*deci_R = 4;
			}
		}

       }
// Code calculation for exponential
void exponential(double complex *z, s32 num2, s32 num1, u16 *deci_I, u16 *deci_R)
       {
 	double complex result;
  	s16 dec_I1, dec_R1;		// Detects if complex number is present and calculates it
		*z = cexp(*z);
		result = *z * 10;	/*			Same section for decimal detection as before 			*/
		dec_I1= cimag(result);
		dec_R1 = creal (result);
		if (dec_I1 % 10 != 0){	// Detects decimal numbers
			if(dec_I1 > 0){
				*deci_I = 1;
			}
			else if(dec_I1 < 0){
				*deci_I = 4;
			}
		}
		if (dec_R1 % 10 != 0){
			if(dec_R1 > 0){
				*deci_R = 1;
			}
			else if(dec_R1 < 0){
				*deci_R = 4;
			}
		}

       }
// Code calculation for natural logarithm
void nat_log(double complex *z, s32 num2, s32 num1, u16 *deci_I, u16 *deci_R)
       {
 	double complex result;
  	s16 dec_I1, dec_R1;		// Detects if complex number is present and calculates it
		*z = clog(*z);
		result = *z * 10;			/*			Same section for decimal detection as before 			*/
		dec_I1= cimag(result);
		dec_R1 = creal (result);
		if (dec_I1 % 10 != 0){	// Detects decimal numbers
			if(dec_I1 > 0){
				*deci_I = 1;
			}
			else if(dec_I1 < 0){
				*deci_I = 4;
			}
		}
		if (dec_R1 % 10 != 0){
			if(dec_R1 > 0){
				*deci_R = 1;
			}
			else if(dec_R1 < 0){
				*deci_R = 4;
			}
		}

       }
// Code calculation for logarithm base 10
void logarithm(double complex *z, s32 num2, s32 num1, u16 *deci_I, u16 *deci_R)
       {
 	double complex result;
  	s16 dec_I1, dec_R1;		// Detects if complex number is present and calculates it

		*z = clog(*z)/clog(10); /* Since log() can't be used, I used clog() with logarithm law to */
		result = *z * 10;		/*	enable complex numbers to be calculated. */
		dec_I1= cimag(result);	/*			Same section for decimal detection as before 			*/
		dec_R1 = creal (result);
		if (dec_I1 % 10 != 0){	// Detects decimal numbers
			if(dec_I1 > 0){
				*deci_I = 1;
			}
			else if(dec_I1 < 0){
				*deci_I = 4;
			}
		}
		if (dec_R1 % 10 != 0){
			if(dec_R1 > 0){
				*deci_R = 1;
			}
			else if(dec_R1 < 0){
				*deci_R = 4;
			}
		}


       }


/*	The functions for the arithmetic calculations are defined here so that it will be transferred to the
	main function.
*/
