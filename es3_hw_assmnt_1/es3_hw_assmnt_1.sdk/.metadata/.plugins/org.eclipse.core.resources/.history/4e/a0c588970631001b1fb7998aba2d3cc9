/*
	 a : s1945267		File : seg7_display.c
*/
#include <stdio.h>
#include "xil_types.h"		// Added for integer type definitions
#include "seg7_display.h"	// Added for 7-segment definitions
#include "gpio_init.h"

// declaration of the  variables used in seg7_display.c
u8 digitDisplayed = FALSE;
u8 digits[4];
u8 numOfDigits;
u8 digitToDisplay;
u8 digitNumber;
u8 display_number;
s16 negative; 				// used to modulus the number so that displayNumber can identify negative numbers

/*	displayNumber() function will detect the number in the range and display it at the 7-segment display */

void displayNumber(s16 number, u16 decide)
{
	u8 count;
	/* Note that 9999 is the maximum number that can be displayed
	 * Therefore, check if the number is less than or equal to 9999
	 * and display the number otherwise, display dashes in all the four segments
	 */
	if(number <= 9999){
		if (decide == 1) //Displays a decimal number
		{
			calculateDigits(number);
			count = 4;
			if (numOfDigits == 1) {		/*	If the number is 0.XX	*/

				while (count > 2) {
					if (count == 3) {
						digitToDisplay = 10; /* '0.'	*/
					} else {
						digitToDisplay = digits[count - 1];
					}
					digitNumber = count;
					count--;
					while (digitDisplayed == FALSE)	/* TIMER */
						;
					digitDisplayed = FALSE;
				}

			}
			else
			{
				while (count > 4 - numOfDigits) {		/*	If the number is X.XX	*/
						if (count == 3) {
							digitToDisplay = (digits[count - 1] + 10);
						} else {
							digitToDisplay = digits[count - 1];
						}
						digitNumber = count;
						count--;
						while (digitDisplayed == FALSE);
						digitDisplayed = FALSE;
					}
			}
		}
		else if (decide == 2) // To display whole numbers
		{
			calculateDigits(number);
			count = 4;
			while (count > 4 - numOfDigits)
			{
				digitToDisplay = digits[count-1];
				digitNumber = count;
				count--;
				/* Wait for timer interrupt to occur and ISR to finish
				 * executing digit display instructions
				 */
				while (digitDisplayed == FALSE);
				digitDisplayed = FALSE;
			}
		}
		else if (decide == 3) // Negative values to be displayed is in between 0 to -999
		{

			negative = number * (-1); // to make sure that calculate digits can read the negative number
			calculateDigits(negative);
			count = 4;
			while (count >= 4 - numOfDigits)
			{
				if (count == 4 - numOfDigits)
				{
					digitToDisplay = NUMBER_DASH;		// NUMBER_DASH for the negative dash
				}
				else
				{
					digitToDisplay = digits[count - 1];
				}
				digitNumber = count;
				count--;

				while (digitDisplayed == FALSE);
				digitDisplayed = FALSE;
			}
		}
		else if(decide == 4)
		{
			negative = number * (-1);
			calculateDigits(number);
						count = 4;
						if (numOfDigits == 1) {		/*	If the number is -0.X	*/

							while (count > 3 - numOfDigits) {
								if (count == 2) {
									digitToDisplay = NUMBER_DASH;; /* '0.'	*/
								}else if (count == 3)
								{
									digitToDisplay = 10;		// NUMBER_DASH for the negative dash
								}else {
									digitToDisplay = digits[count - 1];
								}
								digitNumber = count;
								count--;
								while (digitDisplayed == FALSE);
								digitDisplayed = FALSE;
							}

						}
						else {		/*	If the number is -XX.X	*/

							while (count >= 4 - numOfDigits) {
								if(count == 3){
									digitToDisplay = (digits[count-1]+10); /* '0.'	*/
								} else if (count == 3 - numOfDigits) {

									digitToDisplay = digits[count-1];

								} else if (count == 4 - numOfDigits)
								{
									digitToDisplay = NUMBER_DASH;		// NUMBER_DASH for the negative dash
								}else {
									digitToDisplay = digits[count - 1];
								}
								digitNumber = count;
								count--;
								while (digitDisplayed == FALSE);
								digitDisplayed = FALSE;
							}

						}
		}
	}
	else
	{
		// Display "----" to indicate that the number is out of range
		count = 1;
		while (count < 5)
		{
			digitToDisplay = NUMBER_DASH;
			digitNumber = count;
			count++;
			/* Wait for timer interrupt to occur and ISR to finish
			 * executing digit display instructions
			 */
			while (digitDisplayed == FALSE);
			digitDisplayed = FALSE;
		}
	}
}

/*		calculateDigits() function determine how many digits should be displayed		*/

void calculateDigits(u16 number)
{
	u8 fourthDigit;
	u8 thirdDigit;
	u8 secondDigit;
	u8 firstDigit;

	// Check if number is up to four digits
	if (number > 999)
	{
		numOfDigits = 4;

		fourthDigit  = number % 10;
		thirdDigit = (number / 10) % 10;
		secondDigit  = (number / 100) % 10;
		firstDigit = number / 1000;
	}
	// Check if number is three-digits long
	else if (number > 99 && number < 1000)
	{
		numOfDigits = 3;

		fourthDigit  = number % 10;
		thirdDigit = (number / 10) % 10;
		secondDigit  = (number / 100) % 10;
		firstDigit = 0;
	}
	// Check if number is two-digits long
	else if (number > 9 && number < 100)
	{
		numOfDigits = 2;

		fourthDigit  = number % 10;
		thirdDigit = (number / 10) % 10;
		secondDigit  = 0;
		firstDigit = 0;
	}
	// Check if number is one-digit long
	else if (number >= 0 && number < 10)
	{
		numOfDigits = 1;

		fourthDigit  = number % 10;
		thirdDigit = 0;
		secondDigit  = 0;
		firstDigit = 0;
	}

	digits[0] = firstDigit;
	digits[1] = secondDigit;
	digits[2] = thirdDigit;
	digits[3] = fourthDigit;

	return;
}

/* 			displayDigit() function inputs in what digits will be chosen to be displayed		*/

void displayDigit()
{
	/*
	 * This timer ISR is used to display the digits
	 */
	switch (digitToDisplay)
	{
		case NUMBER_BLANK :
			XGpio_DiscreteWrite(&SEG7_HEX_OUT, 1, DIGIT_BLANK); 	// Displays blank spaces
			break;
		case 0 :
			XGpio_DiscreteWrite(&SEG7_HEX_OUT, 1, DIGIT_ZERO); 		// Displays digit '0'
			break;
		case 1 :
			XGpio_DiscreteWrite(&SEG7_HEX_OUT, 1, DIGIT_ONE); 		// Displays digit '1'
			break;
		case 2 :
			XGpio_DiscreteWrite(&SEG7_HEX_OUT, 1, DIGIT_TWO); 		// Displays digit '2'
			break;
		case 3 :
			XGpio_DiscreteWrite(&SEG7_HEX_OUT, 1, DIGIT_THREE); 	// Displays digit '3'
			break;
		case 4 :
			XGpio_DiscreteWrite(&SEG7_HEX_OUT, 1, DIGIT_FOUR);		// Displays digit '4'
			break;
		case 5 :
			XGpio_DiscreteWrite(&SEG7_HEX_OUT, 1, DIGIT_FIVE);		// Displays digit '5'
			break;
		case 6 :
			XGpio_DiscreteWrite(&SEG7_HEX_OUT, 1, DIGIT_SIX);		// Displays digit '6'
			break;
		case 7 :
			XGpio_DiscreteWrite(&SEG7_HEX_OUT, 1, DIGIT_SEVEN);		// Displays digit '7'
			break;
		case 8 :
			XGpio_DiscreteWrite(&SEG7_HEX_OUT, 1, DIGIT_EIGHT);		// Displays digit '8'
			break;
		case 9 :
			XGpio_DiscreteWrite(&SEG7_HEX_OUT, 1, DIGIT_NINE);		// Displays digit '9'
			break;
		case 10:		/*	This displays '0.'	*/
			display_number = DIGIT_DP & DIGIT_A & DIGIT_B & DIGIT_C & DIGIT_D & DIGIT_E & DIGIT_F;
			XGpio_DiscreteWrite(&SEG7_HEX_OUT, 1, display_number);
			break;
		case 11:		/*	This displays '1.'	*/
			display_number = DIGIT_DP & DIGIT_B & DIGIT_C;
			XGpio_DiscreteWrite(&SEG7_HEX_OUT, 1, display_number);
			break;
		case 12:		/*	This displays '2.'	*/
			display_number = DIGIT_DP & DIGIT_A & DIGIT_B & DIGIT_DASH & DIGIT_E
					& DIGIT_D;
			XGpio_DiscreteWrite(&SEG7_HEX_OUT, 1, display_number);
			break;
		case 13:		/*	This displays '3.'	*/
			display_number = DIGIT_DP & DIGIT_A & DIGIT_B & DIGIT_DASH & DIGIT_C
					& DIGIT_D;
			XGpio_DiscreteWrite(&SEG7_HEX_OUT, 1, display_number);
			break;
		case 14:		/*	This displays '4.'	*/
			display_number = DIGIT_DP & DIGIT_F & DIGIT_DASH & DIGIT_B & DIGIT_C;
			XGpio_DiscreteWrite(&SEG7_HEX_OUT, 1, display_number);
			break;
		case 15:		/*	This displays '5.'	*/
			display_number = DIGIT_DP & DIGIT_A & DIGIT_F & DIGIT_DASH & DIGIT_C
					& DIGIT_D;
			XGpio_DiscreteWrite(&SEG7_HEX_OUT, 1, display_number);
			break;
		case 16:		/*	This displays '6.'	*/
			display_number = DIGIT_DP & DIGIT_C & DIGIT_D & DIGIT_E & DIGIT_F
					& DIGIT_A & DIGIT_DASH;
			XGpio_DiscreteWrite(&SEG7_HEX_OUT, 1, display_number);
			break;
		case 17:		/*	This displays '7.'	*/
			display_number = DIGIT_DP & DIGIT_A & DIGIT_C & DIGIT_B;
			XGpio_DiscreteWrite(&SEG7_HEX_OUT, 1, display_number);
			break;
		case 18:		/*	This displays '8.'	*/
			display_number = DIGIT_DP & DIGIT_A & DIGIT_B & DIGIT_C & DIGIT_D
					& DIGIT_E & DIGIT_F & DIGIT_DASH;
			XGpio_DiscreteWrite(&SEG7_HEX_OUT, 1, display_number);
			break;
		case 19:		/*	This displays '9.'	*/
			display_number = DIGIT_DP & DIGIT_A & DIGIT_B & DIGIT_C & DIGIT_D & DIGIT_F & DIGIT_DASH;
			XGpio_DiscreteWrite(&SEG7_HEX_OUT, 1, display_number);
			break;
		case NUMBER_DASH :
			XGpio_DiscreteWrite(&SEG7_HEX_OUT, 1, DIGIT_DASH);		// Displays dash '-'
			break;
	}

	// Select the appropriate digit
	if (digitNumber == 1) {
		XGpio_DiscreteWrite(&SEG7_SEL_OUT, 1, EN_FIRST_SEG);
	}
	else if (digitNumber == 2) {
		XGpio_DiscreteWrite(&SEG7_SEL_OUT, 1, EN_SECOND_SEG);
	}
	else if (digitNumber == 3) {
		XGpio_DiscreteWrite(&SEG7_SEL_OUT, 1, EN_THIRD_SEG);
	}
	else if (digitNumber == 4) {
		XGpio_DiscreteWrite(&SEG7_SEL_OUT, 1, EN_FOURTH_SEG);
	}

	digitDisplayed = TRUE;
	return;
}
